/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package br.gov.demoiselle.portal.evento.model.impl;

import br.gov.demoiselle.portal.evento.model.EventoConfiguracao;
import br.gov.demoiselle.portal.evento.model.EventoConfiguracaoModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EventoConfiguracao service. Represents a row in the &quot;demoiselle_EventoConfiguracao&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link br.gov.demoiselle.portal.evento.model.EventoConfiguracaoModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventoConfiguracaoImpl}.
 * </p>
 *
 * @author Clovis Lemes Ferreira Junior
 * @see EventoConfiguracaoImpl
 * @see br.gov.demoiselle.portal.evento.model.EventoConfiguracao
 * @see br.gov.demoiselle.portal.evento.model.EventoConfiguracaoModel
 * @generated
 */
public class EventoConfiguracaoModelImpl extends BaseModelImpl<EventoConfiguracao>
	implements EventoConfiguracaoModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a evento configuracao model instance should use the {@link br.gov.demoiselle.portal.evento.model.EventoConfiguracao} interface instead.
	 */
	public static final String TABLE_NAME = "demoiselle_EventoConfiguracao";
	public static final Object[][] TABLE_COLUMNS = {
			{ "eventoConfiguracaoId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "eventoId", Types.BIGINT },
			{ "abertoAoPublico", Types.BOOLEAN },
			{ "cidadeDoEvento", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table demoiselle_EventoConfiguracao (eventoConfiguracaoId LONG not null primary key,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,eventoId LONG,abertoAoPublico BOOLEAN,cidadeDoEvento VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table demoiselle_EventoConfiguracao";
	public static final String ORDER_BY_JPQL = " ORDER BY eventoConfiguracao.eventoId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY demoiselle_EventoConfiguracao.eventoId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.br.gov.demoiselle.portal.evento.model.EventoConfiguracao"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.br.gov.demoiselle.portal.evento.model.EventoConfiguracao"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.br.gov.demoiselle.portal.evento.model.EventoConfiguracao"),
			true);
	public static long EVENTOID_COLUMN_BITMASK = 1L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.br.gov.demoiselle.portal.evento.model.EventoConfiguracao"));

	public EventoConfiguracaoModelImpl() {
	}

	public long getPrimaryKey() {
		return _eventoConfiguracaoId;
	}

	public void setPrimaryKey(long primaryKey) {
		setEventoConfiguracaoId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_eventoConfiguracaoId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return EventoConfiguracao.class;
	}

	public String getModelClassName() {
		return EventoConfiguracao.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("eventoConfiguracaoId", getEventoConfiguracaoId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("eventoId", getEventoId());
		attributes.put("abertoAoPublico", getAbertoAoPublico());
		attributes.put("cidadeDoEvento", getCidadeDoEvento());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long eventoConfiguracaoId = (Long)attributes.get("eventoConfiguracaoId");

		if (eventoConfiguracaoId != null) {
			setEventoConfiguracaoId(eventoConfiguracaoId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long eventoId = (Long)attributes.get("eventoId");

		if (eventoId != null) {
			setEventoId(eventoId);
		}

		Boolean abertoAoPublico = (Boolean)attributes.get("abertoAoPublico");

		if (abertoAoPublico != null) {
			setAbertoAoPublico(abertoAoPublico);
		}

		String cidadeDoEvento = (String)attributes.get("cidadeDoEvento");

		if (cidadeDoEvento != null) {
			setCidadeDoEvento(cidadeDoEvento);
		}
	}

	public long getEventoConfiguracaoId() {
		return _eventoConfiguracaoId;
	}

	public void setEventoConfiguracaoId(long eventoConfiguracaoId) {
		_eventoConfiguracaoId = eventoConfiguracaoId;
	}

	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	public long getEventoId() {
		return _eventoId;
	}

	public void setEventoId(long eventoId) {
		_columnBitmask = -1L;

		if (!_setOriginalEventoId) {
			_setOriginalEventoId = true;

			_originalEventoId = _eventoId;
		}

		_eventoId = eventoId;
	}

	public long getOriginalEventoId() {
		return _originalEventoId;
	}

	public boolean getAbertoAoPublico() {
		return _abertoAoPublico;
	}

	public boolean isAbertoAoPublico() {
		return _abertoAoPublico;
	}

	public void setAbertoAoPublico(boolean abertoAoPublico) {
		_abertoAoPublico = abertoAoPublico;
	}

	public String getCidadeDoEvento() {
		if (_cidadeDoEvento == null) {
			return StringPool.BLANK;
		}
		else {
			return _cidadeDoEvento;
		}
	}

	public void setCidadeDoEvento(String cidadeDoEvento) {
		_cidadeDoEvento = cidadeDoEvento;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			EventoConfiguracao.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public EventoConfiguracao toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (EventoConfiguracao)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		EventoConfiguracaoImpl eventoConfiguracaoImpl = new EventoConfiguracaoImpl();

		eventoConfiguracaoImpl.setEventoConfiguracaoId(getEventoConfiguracaoId());
		eventoConfiguracaoImpl.setCompanyId(getCompanyId());
		eventoConfiguracaoImpl.setUserId(getUserId());
		eventoConfiguracaoImpl.setCreateDate(getCreateDate());
		eventoConfiguracaoImpl.setModifiedDate(getModifiedDate());
		eventoConfiguracaoImpl.setEventoId(getEventoId());
		eventoConfiguracaoImpl.setAbertoAoPublico(getAbertoAoPublico());
		eventoConfiguracaoImpl.setCidadeDoEvento(getCidadeDoEvento());

		eventoConfiguracaoImpl.resetOriginalValues();

		return eventoConfiguracaoImpl;
	}

	public int compareTo(EventoConfiguracao eventoConfiguracao) {
		int value = 0;

		if (getEventoId() < eventoConfiguracao.getEventoId()) {
			value = -1;
		}
		else if (getEventoId() > eventoConfiguracao.getEventoId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		EventoConfiguracao eventoConfiguracao = null;

		try {
			eventoConfiguracao = (EventoConfiguracao)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = eventoConfiguracao.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		EventoConfiguracaoModelImpl eventoConfiguracaoModelImpl = this;

		eventoConfiguracaoModelImpl._originalEventoId = eventoConfiguracaoModelImpl._eventoId;

		eventoConfiguracaoModelImpl._setOriginalEventoId = false;

		eventoConfiguracaoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<EventoConfiguracao> toCacheModel() {
		EventoConfiguracaoCacheModel eventoConfiguracaoCacheModel = new EventoConfiguracaoCacheModel();

		eventoConfiguracaoCacheModel.eventoConfiguracaoId = getEventoConfiguracaoId();

		eventoConfiguracaoCacheModel.companyId = getCompanyId();

		eventoConfiguracaoCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			eventoConfiguracaoCacheModel.createDate = createDate.getTime();
		}
		else {
			eventoConfiguracaoCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			eventoConfiguracaoCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			eventoConfiguracaoCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		eventoConfiguracaoCacheModel.eventoId = getEventoId();

		eventoConfiguracaoCacheModel.abertoAoPublico = getAbertoAoPublico();

		eventoConfiguracaoCacheModel.cidadeDoEvento = getCidadeDoEvento();

		String cidadeDoEvento = eventoConfiguracaoCacheModel.cidadeDoEvento;

		if ((cidadeDoEvento != null) && (cidadeDoEvento.length() == 0)) {
			eventoConfiguracaoCacheModel.cidadeDoEvento = null;
		}

		return eventoConfiguracaoCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{eventoConfiguracaoId=");
		sb.append(getEventoConfiguracaoId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", eventoId=");
		sb.append(getEventoId());
		sb.append(", abertoAoPublico=");
		sb.append(getAbertoAoPublico());
		sb.append(", cidadeDoEvento=");
		sb.append(getCidadeDoEvento());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("br.gov.demoiselle.portal.evento.model.EventoConfiguracao");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>eventoConfiguracaoId</column-name><column-value><![CDATA[");
		sb.append(getEventoConfiguracaoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventoId</column-name><column-value><![CDATA[");
		sb.append(getEventoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>abertoAoPublico</column-name><column-value><![CDATA[");
		sb.append(getAbertoAoPublico());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cidadeDoEvento</column-name><column-value><![CDATA[");
		sb.append(getCidadeDoEvento());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = EventoConfiguracao.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			EventoConfiguracao.class
		};
	private long _eventoConfiguracaoId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private Date _createDate;
	private Date _modifiedDate;
	private long _eventoId;
	private long _originalEventoId;
	private boolean _setOriginalEventoId;
	private boolean _abertoAoPublico;
	private String _cidadeDoEvento;
	private long _columnBitmask;
	private EventoConfiguracao _escapedModelProxy;
}